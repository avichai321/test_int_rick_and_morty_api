name: Deploy to k8s github

on:
  push:
    branches:
      - master

jobs:
  test-endpoints:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up k3s
        run: |
           curl -sfL https://get.k3s.io | sh -s - --docker --disable=traefik
           sudo mkdir -p /etc/rancher/k3s
           sudo chmod 644 /etc/rancher/k3s/k3s.yaml
           export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
      
      - name: Check k3s Status
        run: |
          sudo k3s kubectl get nodes
          sudo k3s kubectl get pods --all-namespaces
          sudo k3s kubectl get svc --all-namespaces

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Deploy to Kubernetes
        run: |
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          helm install rick-and-morty-rest-api ./rick-and-morty-rest-api-0.1.0.tgz \
            --set image.repository=${{ secrets.DOCKER_USERNAME }}/rick_and_morty_avicii \
            --set image.tag=latest \
            --set service.port=80
      - name: Verify Kubernetes Cluster
        run: |
          sudo k3s kubectl get nodes

          
      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash

      - name: Add NGINX Ingress Helm repo
        run: |
          sudo helm repo add ingress-nginx https://kubernetes.github.io/ingress-nginx
          sudo helm repo update

      - name: Verify Helm Repositories
        run: |
          sudo helm repo list

      - name: Install NGINX Ingress Controller
        run: |
          sudo helm install nginx-ingress ingress-nginx/ingress-nginx --namespace default
          
      - name: Verify Ingress Controller Installation
        run: |
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          sudo kubectl get pods -n default -l app.kubernetes.io/name=ingress-nginx
      
      - name: Wait for deployment
        run: |
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          kubectl rollout status deployment/rick-and-morty-deploy --timeout=2m
      
      - name: Sleep for 1 Minute
        uses: jakejarvis/wait-action@master
        with:
          time: '30s'

      - name: Check k3s Status After Deploy
        run: |
          sudo k3s kubectl get nodes
          sudo k3s kubectl get pods --all-namespaces
          sudo k3s kubectl get svc --all-namespaces
          sudo k3s kubectl get ingress -A

      - name: Test Fetch Characters Endpoint
        run: |
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          external_ip=$(sudo k3s kubectl get ingress rick-and-morty-ingress -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z "$external_ip" ]; then
            external_hostname=$(sudo k3s kubectl get ingress rick-and-morty-ingress -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            endpoint=$external_hostname
          else
            endpoint=$external_ip
          fi
          echo "Testing Fetch Characters endpoint: http://$endpoint/fetch_char"
          response=$(curl -s -o /dev/null -w "%{http_code}" http://$endpoint/fetch_char)
          if [ $response -eq 200 ]; then
            echo "Fetch Characters endpoint is reachable"
          else
            echo "Fetch Characters endpoint returned status $response"
            exit 1
          fi

      - name: Test Health Check Endpoint
        run: |
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          external_ip=$(sudo k3s kubectl get ingress rick-and-morty-ingress -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z "$external_ip" ]; then
            external_hostname=$(sudo k3s kubectl get ingress rick-and-morty-ingress -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            endpoint=$external_hostname
          else
            endpoint=$external_ip
          fi
          echo "Testing Health Check endpoint: http://$endpoint/healthcheck"
          response=$(curl -s -o /dev/null -w "%{http_code}" http://$endpoint/healthcheck)
          if [ $response -eq 200 ]; then
            echo "Health Check endpoint is reachable"
          else
            echo "Health Check endpoint returned status $response"
            exit 1
          fi

      - name: Stop k3s
        run: sudo k3s-uninstall.sh
