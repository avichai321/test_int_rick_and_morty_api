name: Deploy to Minikube with Ingress

on:
  push:
    branches:
      - master

jobs:
  deploy:
    runs-on: ubuntu-22.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Minikube
        run: |
          sudo apt-get update -y
          sudo apt-get install -y curl apt-transport-https
          curl -Lo minikube https://storage.googleapis.com/minikube/releases/latest/minikube-linux-amd64
          sudo install minikube /usr/local/bin/
          minikube start --driver=docker --wait=all
          minikube addons enable ingress
          echo "KUBECONFIG=$(minikube kubeconfig)" >> $GITHUB_ENV

      - name: Install Helm
        run: |
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
     
     -  name: Wait for NGINX Ingress Controller to be ready
        run: |
          export KUBECONFIG=$(minikube kubeconfig)
          kubectl wait --namespace kube-system \
            --for=condition=ready pod \
            --selector=app.kubernetes.io/name=ingress-nginx \
            --timeout=300s

      - name: Deploy to Kubernetes
        run: |
          helm install rick-and-morty-rest-api ./rick-and-morty-rest-api-0.1.0.tgz \
            --set image.repository=${{ secrets.DOCKER_USERNAME }}/rick_and_morty_avicii \
            --set image.tag=latest \
            --set service.port=80
        env:
          KUBECONFIG: ${{ env.KUBECONFIG }}

      - name: Wait for deployment
        run: kubectl rollout status deployment/rick-and-morty-deploy --timeout=2m

      - name: Sleep for 1 Minute
        uses: jakejarvis/wait-action@master
        with:
          time: '60s'

      - name: Check Minikube Status After Deploy
        run: |
          kubectl get nodes
          kubectl get pods --all-namespaces
          kubectl get svc --all-namespaces
          kubectl get ingress -A

      - name: Test Fetch Characters Endpoint
        run: |
          external_ip=$(kubectl get ingress rick-and-morty-ingress -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z "$external_ip" ]; then
            external_hostname=$(kubectl get ingress rick-and-morty-ingress -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            endpoint=$external_hostname
          else
            endpoint=$external_ip
          fi
          echo "Testing Fetch Characters endpoint: http://$endpoint/fetch_char"
          response=$(curl -s -o /dev/null -w "%{http_code}" http://$endpoint/fetch_char)
          if [ $response -eq 200 ]; then
            echo "Fetch Characters endpoint is reachable"
          else
            echo "Fetch Characters endpoint returned status $response"
            exit 1
          fi

      - name: Test Health Check Endpoint
        run: |
          external_ip=$(kubectl get ingress rick-and-morty-ingress -o=jsonpath='{.status.loadBalancer.ingress[0].ip}')
          if [ -z "$external_ip" ]; then
            external_hostname=$(kubectl get ingress rick-and-morty-ingress -o=jsonpath='{.status.loadBalancer.ingress[0].hostname}')
            endpoint=$external_hostname
          else
            endpoint=$external_ip
          fi
          echo "Testing Health Check endpoint: http://$endpoint/healthcheck"
          response=$(curl -s -o /dev/null -w "%{http_code}" http://$endpoint/healthcheck)
          if [ $response -eq 200 ]; then
            echo "Health Check endpoint is reachable"
          else
            echo "Health Check endpoint returned status $response"
            exit 1
          fi

      - name: Stop Minikube
        run: minikube stop
